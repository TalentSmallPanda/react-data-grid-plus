{"version":3,"file":"AllFeatures.lazy-5dQy5tOI.js","sources":["../../website/routes/AllFeatures.lazy.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { createLazyFileRoute } from '@tanstack/react-router';\nimport { css } from '@linaria/core';\n\nimport DataGrid, { SelectColumn, textEditor } from '../../src';\nimport type { Column, CopyEvent, FillEvent, PasteEvent } from '../../src';\nimport { textEditorClassname } from '../../src/editors/textEditor';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createLazyFileRoute('/AllFeatures')({\n  component: AllFeatures\n});\n\nconst highlightClassname = css`\n  .rdg-cell {\n    background-color: #9370db;\n    color: white;\n  }\n\n  &:hover .rdg-cell {\n    background-color: #800080;\n  }\n`;\n\nexport interface Row {\n  id: string;\n  avatar: string;\n  email: string;\n  title: string;\n  firstName: string;\n  lastName: string;\n  street: string;\n  zipCode: string;\n  date: string;\n  bs: string;\n  catchPhrase: string;\n  companyName: string;\n  words: string;\n  sentence: string;\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nconst avatarClassname = css`\n  margin: auto;\n  background-size: 100%;\n  block-size: 28px;\n  inline-size: 28px;\n`;\n\nconst titles = ['Dr.', 'Mr.', 'Mrs.', 'Miss', 'Ms.'] as const;\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80,\n    resizable: true,\n    frozen: true\n  },\n  {\n    key: 'avatar',\n    name: 'Avatar',\n    width: 40,\n    resizable: true,\n    renderCell({ row }) {\n      return <div className={avatarClassname} style={{ backgroundImage: `url(${row.avatar})` }} />;\n    }\n  },\n  {\n    key: 'title',\n    name: 'Title',\n    width: 200,\n    resizable: true,\n    renderEditCell({ row, onRowChange }) {\n      return (\n        <select\n          className={textEditorClassname}\n          value={row.title}\n          onChange={(event) => onRowChange({ ...row, title: event.target.value }, true)}\n          autoFocus\n        >\n          {titles.map((title) => (\n            <option key={title} value={title}>\n              {title}\n            </option>\n          ))}\n        </select>\n      );\n    }\n  },\n  {\n    key: 'firstName',\n    name: 'First Name',\n    width: 200,\n    resizable: true,\n    frozen: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'lastName',\n    name: 'Last Name',\n    width: 200,\n    resizable: true,\n    frozen: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'email',\n    name: 'Email',\n    width: 'max-content',\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'street',\n    name: 'Street',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'zipCode',\n    name: 'ZipCode',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'date',\n    name: 'Date',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'bs',\n    name: 'bs',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'catchPhrase',\n    name: 'Catch Phrase',\n    width: 'max-content',\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'companyName',\n    name: 'Company Name',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'sentence',\n    name: 'Sentence',\n    width: 'max-content',\n    resizable: true,\n    renderEditCell: textEditor\n  }\n];\n\nfunction AllFeatures() {\n  const direction = useDirection();\n  const initialRows = Route.useLoaderData();\n  const [rows, setRows] = useState(initialRows);\n  const [selectedRows, setSelectedRows] = useState((): ReadonlySet<string> => new Set());\n\n  function handleFill({ columnKey, sourceRow, targetRow }: FillEvent<Row>): Row {\n    return { ...targetRow, [columnKey]: sourceRow[columnKey as keyof Row] };\n  }\n\n  function handlePaste({\n    sourceColumnKey,\n    sourceRow,\n    targetColumnKey,\n    targetRow\n  }: PasteEvent<Row>): Row {\n    const incompatibleColumns = ['email', 'zipCode', 'date'];\n    if (\n      sourceColumnKey === 'avatar' ||\n      ['id', 'avatar'].includes(targetColumnKey) ||\n      ((incompatibleColumns.includes(targetColumnKey) ||\n        incompatibleColumns.includes(sourceColumnKey)) &&\n        sourceColumnKey !== targetColumnKey)\n    ) {\n      return targetRow;\n    }\n\n    return { ...targetRow, [targetColumnKey]: sourceRow[sourceColumnKey as keyof Row] };\n  }\n\n  function handleCopy({ sourceRow, sourceColumnKey }: CopyEvent<Row>): void {\n    if (window.isSecureContext) {\n      navigator.clipboard.writeText(sourceRow[sourceColumnKey as keyof Row]);\n    }\n  }\n\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={setRows}\n      onFill={handleFill}\n      onCopy={handleCopy}\n      onPaste={handlePaste}\n      rowHeight={30}\n      selectedRows={selectedRows}\n      isRowSelectionDisabled={(row) => row.id === 'id_2'}\n      onSelectedRowsChange={setSelectedRows}\n      className=\"fill-grid\"\n      rowClass={(row, index) =>\n        row.id.includes('7') || index === 0 ? highlightClassname : undefined\n      }\n      direction={direction}\n      onCellClick={(args, event) => {\n        if (args.column.key === 'title') {\n          event.preventGridDefault();\n          args.selectCell(true);\n        }\n      }}\n    />\n  );\n}\n"],"names":["Route","createLazyFileRoute","component","AllFeatures","highlightClassname","rowKeyGetter","row","id","avatarClassname","titles","columns","SelectColumn","key","name","width","resizable","frozen","renderCell","jsx","className","style","backgroundImage","avatar","renderEditCell","onRowChange","textEditorClassname","value","title","onChange","event","target","autoFocus","children","map","textEditor","direction","useDirection","initialRows","useLoaderData","rows","setRows","useState","selectedRows","setSelectedRows","Set","handleFill","columnKey","sourceRow","targetRow","handlePaste","sourceColumnKey","targetColumnKey","incompatibleColumns","includes","handleCopy","window","isSecureContext","navigator","clipboard","writeText","DataGrid","onRowsChange","onFill","onCopy","onPaste","rowHeight","isRowSelectionDisabled","onSelectedRowsChange","rowClass","index","onCellClick","args","column","preventGridDefault","selectCell"],"mappings":"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"}