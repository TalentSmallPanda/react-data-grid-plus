{"version":3,"file":"ColumnsReordering.lazy-CfYwku9h.js","sources":["../../website/routes/ColumnsReordering.lazy.tsx"],"sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { createLazyFileRoute } from '@tanstack/react-router';\n\nimport DataGrid from '../../src';\nimport type { Column, SortColumn } from '../../src';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createLazyFileRoute('/ColumnsReordering')({\n  component: ColumnsReordering\n});\n\ninterface Row {\n  readonly id: number;\n  readonly task: string;\n  readonly complete: number;\n  readonly priority: string;\n  readonly issueType: string;\n}\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  },\n  {\n    key: 'priority',\n    name: 'Priority',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  },\n  {\n    key: 'complete',\n    name: '% Complete',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  }\n];\n\nfunction ColumnsReordering() {\n  const direction = useDirection();\n  const [rows] = useState(createRows);\n  const [columnsOrder, setColumnsOrder] = useState((): readonly number[] =>\n    columns.map((_, index) => index)\n  );\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const onSortColumnsChange = useCallback((sortColumns: SortColumn[]) => {\n    setSortColumns(sortColumns.slice(-1));\n  }, []);\n\n  const reorderedColumns = useMemo(() => {\n    return columnsOrder.map((index) => columns[index]);\n  }, [columnsOrder]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n    const { columnKey, direction } = sortColumns[0];\n\n    let sortedRows: Row[] = [...rows];\n\n    switch (columnKey) {\n      case 'task':\n      case 'priority':\n      case 'issueType':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey].localeCompare(b[columnKey]));\n        break;\n      case 'complete':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey] - b[columnKey]);\n        break;\n      default:\n    }\n    return direction === 'DESC' ? sortedRows.reverse() : sortedRows;\n  }, [rows, sortColumns]);\n\n  function onColumnsReorder(sourceKey: string, targetKey: string) {\n    setColumnsOrder((columnsOrder) => {\n      const sourceColumnOrderIndex = columnsOrder.findIndex(\n        (index) => columns[index].key === sourceKey\n      );\n      const targetColumnOrderIndex = columnsOrder.findIndex(\n        (index) => columns[index].key === targetKey\n      );\n      const sourceColumnOrder = columnsOrder[sourceColumnOrderIndex];\n      const newColumnsOrder = columnsOrder.toSpliced(sourceColumnOrderIndex, 1);\n      newColumnsOrder.splice(targetColumnOrderIndex, 0, sourceColumnOrder);\n      return newColumnsOrder;\n    });\n  }\n\n  return (\n    <DataGrid\n      columns={reorderedColumns}\n      rows={sortedRows}\n      sortColumns={sortColumns}\n      onSortColumnsChange={onSortColumnsChange}\n      direction={direction}\n      defaultColumnOptions={{ width: '1fr' }}\n      onColumnsReorder={onColumnsReorder}\n    />\n  );\n}\n"],"names":["Route","createLazyFileRoute","ColumnsReordering","createRows","rows","i","columns","direction","useDirection","useState","columnsOrder","setColumnsOrder","_","index","sortColumns","setSortColumns","onSortColumnsChange","useCallback","reorderedColumns","useMemo","sortedRows","columnKey","a","b","onColumnsReorder","sourceKey","targetKey","sourceColumnOrderIndex","targetColumnOrderIndex","sourceColumnOrder","newColumnsOrder","jsx","DataGrid"],"mappings":"wGAOa,MAAAA,EAAQC,EAAoB,oBAAoB,EAAE,CAC7D,UAAWC,CACb,CAAC,EAUD,SAASC,GAAoB,CAC3B,MAAMC,EAAc,CAAC,EAErB,QAASC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAK,KAAK,CACR,GAAIC,EACJ,KAAM,QAAQA,CAAC,GACf,SAAU,KAAK,IAAI,IAAK,KAAK,MAAM,KAAK,SAAW,GAAG,CAAC,EACvD,SAAU,CAAC,WAAY,OAAQ,SAAU,KAAK,EAAE,KAAK,MAAM,KAAK,OAAO,EAAI,CAAC,CAAC,EAC7E,UAAW,CAAC,MAAO,cAAe,OAAQ,OAAO,EAAE,KAAK,MAAM,KAAK,OAAO,EAAI,CAAC,CAAC,CAAA,CACjF,EAGI,OAAAD,CACT,CAEA,MAAME,EAAyB,CAC7B,CACE,IAAK,KACL,KAAM,KACN,MAAO,EACT,EACA,CACE,IAAK,OACL,KAAM,QACN,UAAW,GACX,SAAU,GACV,UAAW,EACb,EACA,CACE,IAAK,WACL,KAAM,WACN,UAAW,GACX,SAAU,GACV,UAAW,EACb,EACA,CACE,IAAK,YACL,KAAM,aACN,UAAW,GACX,SAAU,GACV,UAAW,EACb,EACA,CACE,IAAK,WACL,KAAM,aACN,UAAW,GACX,SAAU,GACV,UAAW,EAAA,CAEf,EAEA,SAASJ,GAAoB,CAC3B,MAAMK,EAAYC,EAAa,EACzB,CAACJ,CAAI,EAAIK,EAAA,SAASN,CAAU,EAC5B,CAACO,EAAcC,CAAe,EAAIF,EAAA,SAAS,IAC/CH,EAAQ,IAAI,CAACM,EAAGC,IAAUA,CAAK,CACjC,EACM,CAACC,EAAaC,CAAc,EAAIN,EAAAA,SAAgC,CAAA,CAAE,EAClEO,EAAsBC,cAAaH,GAA8B,CACtDA,EAAAA,EAAY,MAAM,EAAE,CAAC,CACtC,EAAG,EAAE,EAECI,EAAmBC,EAAAA,QAAQ,IACxBT,EAAa,IAAKG,GAAUP,EAAQO,CAAK,CAAC,EAChD,CAACH,CAAY,CAAC,EAEXU,EAAaD,EAAAA,QAAQ,IAAsB,CAC3C,GAAAL,EAAY,SAAW,EAAU,OAAAV,EACrC,KAAM,CAAE,UAAAiB,EAAW,UAAAd,CAAU,EAAIO,EAAY,CAAC,EAE1CM,IAAAA,EAAoB,CAAC,GAAGhB,CAAI,EAEhC,OAAQiB,EAAW,CACjB,IAAK,OACL,IAAK,WACL,IAAK,YACHD,EAAaA,EAAW,KAAK,CAACE,EAAGC,IAAMD,EAAED,CAAS,EAAE,cAAcE,EAAEF,CAAS,CAAC,CAAC,EAC/E,MACF,IAAK,WACHD,EAAaA,EAAW,KAAK,CAACE,EAAGC,IAAMD,EAAED,CAAS,EAAIE,EAAEF,CAAS,CAAC,EAClE,KACF,CAEF,OAAOd,IAAc,OAASa,EAAW,QAAYA,EAAAA,CAAA,EACpD,CAAChB,EAAMU,CAAW,CAAC,EAEb,SAAAU,EAAiBC,EAAmBC,EAAmB,CAC9Df,EAAiBD,GAAiB,CAChC,MAAMiB,EAAyBjB,EAAa,UACzCG,GAAUP,EAAQO,CAAK,EAAE,MAAQY,CACpC,EACMG,EAAyBlB,EAAa,UACzCG,GAAUP,EAAQO,CAAK,EAAE,MAAQa,CACpC,EACMG,EAAoBnB,EAAaiB,CAAsB,EACvDG,EAAkBpB,EAAa,UAAUiB,EAAwB,CAAC,EACxD,OAAAG,EAAA,OAAOF,EAAwB,EAAGC,CAAiB,EAC5DC,CAAA,CACR,CAAA,CAID,OAAAC,EAAA,IAACC,EAAA,CACC,QAASd,EACT,KAAME,EACN,YAAAN,EACA,oBAAAE,EACA,UAAAT,EACA,qBAAsB,CAAE,MAAO,KAAM,EACrC,iBAAAiB,CAAA,CACF,CAEJ"}