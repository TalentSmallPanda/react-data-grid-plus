{"version":3,"file":"DataGrid-DYDWxZ_U.js","sources":["../../node_modules/clsx/dist/clsx.mjs","../../src/utils/colSpanUtils.ts","../../src/utils/domUtils.ts","../../src/utils/eventUtils.ts","../../src/utils/keyboardUtils.ts","../../src/utils/renderMeasuringCells.tsx","../../src/utils/selectedCellUtils.ts","../../src/style/cell.ts","../../src/utils/styleUtils.ts","../../src/utils/index.ts","../../src/cellRenderers/renderCheckbox.tsx","../../src/cellRenderers/renderValue.tsx","../../src/DataGridDefaultRenderersProvider.ts","../../src/cellRenderers/SelectCellFormatter.tsx","../../src/hooks/useRowSelection.ts","../../src/Columns.tsx","../../src/hooks/useCalculatedColumns.ts","../../src/hooks/useLayoutEffect.ts","../../src/hooks/useColumnWidths.ts","../../src/hooks/useGridDimensions.ts","../../src/hooks/useLatestFunc.ts","../../src/hooks/useRovingTabIndex.ts","../../src/hooks/useViewportColumns.ts","../../src/hooks/useViewportRows.ts","../../src/Cell.tsx","../../src/DragHandle.tsx","../../src/EditCell.tsx","../../src/GroupedColumnHeaderCell.tsx","../../src/renderHeaderCell.tsx","../../src/HeaderCell.tsx","../../src/style/row.ts","../../src/HeaderRow.tsx","../../src/GroupedColumnHeaderRow.tsx","../../src/Row.tsx","../../src/ScrollToCell.tsx","../../src/sortStatus.tsx","../../src/style/core.ts","../../src/SummaryCell.tsx","../../src/SummaryRow.tsx","../../src/DataGrid.tsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  const vKey = 86;\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  if (isCtrlKeyHeldDown(event) && event.keyCode !== vKey) return false;\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n","import type {\n  CalculatedColumn,\n  CalculatedColumnParent,\n  CellNavigationMode,\n  Maybe,\n  Position\n} from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\n\n// https://github.com/vercel/next.js/issues/56480\nexport function isCellEditableUtil<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  moveUp: boolean;\n  moveNext: boolean;\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  mainHeaderRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex' | 'mainHeaderRowIdx'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (\n    topSummaryRows &&\n    rowIdx > mainHeaderRowIdx &&\n    rowIdx <= topSummaryRowsCount + mainHeaderRowIdx\n  ) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx, rowIdx: currentRowIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n  const columnsCount = columns.length;\n\n  const setColSpan = (moveNext: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  const getParentRowIdx = (parent: CalculatedColumnParent<R, SR>) => {\n    return parent.level + mainHeaderRowIdx;\n  };\n\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      // find the parent at the same row level\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      // find the first reachable parent\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n\n      // keep the current position if there is no parent matching the new row position\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  if (nextRowIdx < mainHeaderRowIdx) {\n    // Find the last reachable parent for the new rowIdx\n    // This check is needed when navigating to a column\n    // that does not have a parent matching the new rowIdx\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning,\n     * layout/paint/style containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    align-content: center;\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n\n    /* Add box-shadow on the last frozen cell */\n    &:nth-last-child(1 of &) {\n      box-shadow: var(--rdg-cell-frozen-box-shadow);\n    }\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\nimport { cellClassname, cellFrozenClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number): CSSProperties {\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getHeaderCellStyle<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number,\n  rowSpan: number,\n  headerRowHeight: number | number[],\n  depth: number\n): React.CSSProperties {\n  const gridRowEnd = rowIdx + 1;\n  let paddingBlockStart = '';\n  const p = column.parent;\n  if (Array.isArray(headerRowHeight)) {\n    const len = depth - 1;\n    const level = column.level + len;\n    const plevel = p ? p.level + len : -1;\n    const k = headerRowHeight.slice(plevel + 1, level).reduce((sum, cur) => sum + cur, 0);\n    paddingBlockStart = `${k}px`;\n  } else {\n    paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n  }\n\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n\n  return {\n    insetBlockStart: Array.isArray(headerRowHeight)\n      ? headerRowHeight.slice(0, rowIdx - rowSpan).reduce((sum, cur) => sum + cur, 0)\n      : `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan = 1\n): React.CSSProperties {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn, CalculatedColumnOrColumnGroup, Maybe } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: Maybe<(row: NoInfer<R>) => K>\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nexport function getHeaderCellRowSpan<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number\n) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkbox = css`\n  @layer rdg.CheckboxInput {\n    display: block;\n    margin: auto;\n    inline-size: 20px;\n    block-size: 20px;\n\n    &:focus-visible {\n      outline: 2px solid var(--rdg-checkbox-focus-color);\n      outline-offset: -3px;\n    }\n\n    &:enabled {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox-input ${checkbox}`;\n\nexport function renderCheckbox({ onChange, indeterminate, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <input\n      ref={(el) => {\n        if (el) {\n          el.indeterminate = indeterminate === true;\n        }\n      }}\n      type=\"checkbox\"\n      className={checkboxClassname}\n      onChange={handleChange}\n      {...props}\n    />\n  );\n}\n","import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby' | 'indeterminate' | 'onChange'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  indeterminate,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    indeterminate,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectHeaderRowEvent, SelectRowEvent } from '../types';\n\nexport interface RowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isRowSelectionDisabled: boolean;\n}\n\nconst RowSelectionContext = createContext<RowSelectionContextValue | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within renderCell');\n  }\n\n  return {\n    isRowSelectionDisabled: rowSelectionContext.isRowSelectionDisabled,\n    isRowSelected: rowSelectionContext.isRowSelected,\n    onRowSelectionChange: rowSelectionChangeContext\n  };\n}\n\nexport interface HeaderRowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isIndeterminate: boolean;\n}\n\nconst HeaderRowSelectionContext = createContext<HeaderRowSelectionContextValue | undefined>(\n  undefined\n);\n\nexport const HeaderRowSelectionProvider = HeaderRowSelectionContext.Provider;\n\nconst HeaderRowSelectionChangeContext = createContext<\n  ((selectRowEvent: SelectHeaderRowEvent) => void) | undefined\n>(undefined);\n\nexport const HeaderRowSelectionChangeProvider = HeaderRowSelectionChangeContext.Provider;\n\nexport function useHeaderRowSelection() {\n  const headerRowSelectionContext = useContext(HeaderRowSelectionContext);\n  const headerRowSelectionChangeContext = useContext(HeaderRowSelectionChangeContext);\n\n  if (headerRowSelectionContext === undefined || headerRowSelectionChangeContext === undefined) {\n    throw new Error('useHeaderRowSelection must be used within renderHeaderCell');\n  }\n\n  return {\n    isIndeterminate: headerRowSelectionContext.isIndeterminate,\n    isRowSelected: headerRowSelectionContext.isRowSelected,\n    onRowSelectionChange: headerRowSelectionChangeContext\n  };\n}\n","import { useHeaderRowSelection, useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'rdg-select-column';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const { isIndeterminate, isRowSelected, onRowSelectionChange } = useHeaderRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      indeterminate={isIndeterminate}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ checked: isIndeterminate ? false : checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const { isRowSelectionDisabled, isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      disabled={isRowSelectionDisabled}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const { isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, CalculatedColumnParent, ColumnOrColumnGroup, Omit } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer V> ? Mutable<V>[] : T[P];\n};\n\ninterface WithParent<R, SR> {\n  readonly parent: MutableCalculatedColumnParent<R, SR> | undefined;\n}\n\ntype MutableCalculatedColumnParent<R, SR> = Omit<Mutable<CalculatedColumnParent<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\ntype MutableCalculatedColumn<R, SR> = Omit<Mutable<CalculatedColumn<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> {\n  rawColumns: readonly ColumnOrColumnGroup<R, SR>[];\n  defaultColumnOptions: DataGridProps<R, SR>['defaultColumnOptions'];\n  viewportWidth: number;\n  scrollLeft: number;\n  getColumnWidth: (column: CalculatedColumn<R, SR>) => string | number;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultCellRenderer = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = useMemo((): {\n    readonly columns: readonly CalculatedColumn<R, SR>[];\n    readonly colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    readonly lastFrozenColumnIndex: number;\n    readonly headerRowsCount: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns: MutableCalculatedColumn<R, SR>[] = [];\n\n    collectColumns(rawColumns, 1);\n\n    function collectColumns(\n      rawColumns: readonly ColumnOrColumnGroup<R, SR>[],\n      level: number,\n      parent?: MutableCalculatedColumnParent<R, SR>\n    ) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent: MutableCalculatedColumnParent<R, SR> = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n\n        const frozen = rawColumn.frozen ?? false;\n\n        const column: MutableCalculatedColumn<R, SR> = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultCellRenderer\n        };\n\n        columns.push(column);\n\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // TODO: sort columns to keep them grouped if they have a parent\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultCellRenderer,\n    defaultResizable,\n    defaultSortable,\n    defaultDraggable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n\nfunction updateColumnParent<R, SR>(\n  column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>,\n  index: number,\n  level: number\n) {\n  if (level < column.level) {\n    column.level = level;\n  }\n\n  if (column.parent !== undefined) {\n    const { parent } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement | null>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement | null>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current?.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - initialHorizontalScrollbarHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      const { clientHeight, offsetHeight } = gridRef.current!;\n\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n        setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, horizontalScrollbarHeight] as const;\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        // eslint-disable-next-line react-compiler/react-compiler\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { forwardRef, memo, type RefAttributes } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditableUtil } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>(\n  {\n    column,\n    colSpan,\n    isCellSelected,\n    isCopied,\n    isDraggedOver,\n    row,\n    rowIdx,\n    className,\n    onClick,\n    onDoubleClick,\n    onContextMenu,\n    onRowChange,\n    selectCell,\n    style,\n    ...props\n  }: CellRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n  const isEditable = isCellEditableUtil(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ rowIdx, row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ rowIdx, row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ rowIdx, row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      aria-readonly={!isEditable || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={{\n        ...getCellStyle(column, colSpan),\n        ...style\n      }}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n    </div>\n  );\n}\n\nconst CellComponent = memo(forwardRef(Cell)) as <R, SR>(\n  props: CellRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => React.JSX.Element;\n\nexport default CellComponent;\n\nexport function defaultRenderCell<R, SR>(key: React.Key, props: CellRendererProps<R, SR>) {\n  return <CellComponent key={key} {...props} />;\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getCellStyle } from './utils';\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    --rdg-drag-handle-size: 8px;\n    z-index: 0;\n    cursor: move;\n    inline-size: var(--rdg-drag-handle-size);\n    block-size: var(--rdg-drag-handle-size);\n    background-color: var(--rdg-selection-color);\n    place-self: end;\n\n    &:hover {\n      --rdg-drag-handle-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleFrozenClassname = css`\n  @layer rdg.DragHandle {\n    z-index: 1;\n    position: sticky;\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\n// TODO: replace with RefObject once we drop support for React 18\ninterface LatestDraggedOverRowIdxRef {\n  readonly current: number | undefined;\n}\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  gridRowStart: number;\n  column: CalculatedColumn<R, SR>;\n  columnWidth: number | string;\n  maxColIdx: number;\n  isLastRow: boolean;\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: LatestDraggedOverRowIdxRef;\n  isCellEditable: (position: Position) => boolean;\n  onClick: () => void;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  gridRowStart,\n  rows,\n  column,\n  columnWidth,\n  maxColIdx,\n  isLastRow,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  onClick,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  const { idx, rowIdx } = selectedPosition;\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    // keep the focus on the cell\n    event.preventDefault();\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  function getStyle(): React.CSSProperties {\n    const colSpan = column.colSpan?.({ type: 'ROW', row: rows[rowIdx] }) ?? 1;\n    const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n\n    return {\n      ...style,\n      gridRowStart,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart\n        ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)`\n        : undefined\n    };\n  }\n\n  return (\n    <div\n      style={getStyle()}\n      className={clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname)}\n      onClick={onClick}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>(undefined);\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            rowIdx,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              rowIdx,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getHeaderCellRowSpan, getHeaderCellStyle } from './utils';\nimport type { CalculatedColumnParent } from './types';\nimport type { GroupedColumnHeaderRowProps } from './GroupedColumnHeaderRow';\nimport { cellClassname } from './style/cell';\n\ntype SharedGroupedColumnHeaderRowProps<R, SR> = Pick<\n  GroupedColumnHeaderRowProps<R, SR>,\n  'rowIdx' | 'selectCell'\n>;\n\ninterface GroupedColumnHeaderCellProps<R, SR> extends SharedGroupedColumnHeaderRowProps<R, SR> {\n  column: CalculatedColumnParent<R, SR>;\n  isCellSelected: boolean;\n  headerRowHeight: number | number[],\n  depth: number\n}\n\nexport default function GroupedColumnHeaderCell<R, SR>({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell,\n  headerRowHeight,\n  depth\n}: GroupedColumnHeaderCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { colSpan } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n\n  function onClick() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={index}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={clsx(cellClassname, column.headerCellClass)}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan, headerRowHeight, depth),\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan\n      }}\n      onFocus={onFocus}\n      onClick={onClick}\n    >\n      {column.name}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCellClassname = css`\n  @layer rdg.SortableHeaderCell {\n    display: flex;\n  }\n`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell sortDirection={sortDirection} priority={priority}>\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'priority'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  sortDirection,\n  priority,\n  children\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  return (\n    <span className={headerSortCellClassname}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport {\n  clampColumnWidth,\n  getCellClassname,\n  getCellStyle,\n  getHeaderCellRowSpan,\n  getHeaderCellStyle,\n  stopPropagation\n} from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultRenderHeaderCell from './renderHeaderCell';\n\nconst cellSortableClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: pointer;\n  }\n`;\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nexport const resizeHandleClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellDraggableClassname = 'rdg-cell-draggable';\n\nconst cellDragging = css`\n  opacity: 0.5;\n`;\n\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\n\nconst cellOver = css`\n  background-color: var(--rdg-header-draggable-background-color);\n`;\n\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n  | 'onColumnsReorder'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  rowIdx: number;\n  isCellSelected: boolean;\n  dragDropKey: string;\n  headerRowHeight: number | number[],\n  depth: number\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  dragDropKey,\n  headerRowHeight,\n  depth\n}: HeaderCellProps<R, SR>) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n  const isRtl = direction === 'rtl';\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n  const { sortable, resizable, draggable } = column;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellSortableClassname]: sortable,\n    [cellResizableClassname]: resizable,\n    [cellDraggableClassname]: draggable,\n    [cellDraggingClassname]: isDragging,\n    [cellOverClassname]: isOver\n  });\n\n  const renderHeaderCell = column.renderHeaderCell ?? defaultRenderHeaderCell;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    // Fix column resizing on a draggable column in FF\n    event.preventDefault();\n\n    const { currentTarget, pointerId } = event;\n    const headerCell = currentTarget.parentElement!;\n    const { right, left } = headerCell.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n    let hasDoubleClicked = false;\n\n    function onPointerMove(event: PointerEvent) {\n      const { width, right, left } = headerCell.getBoundingClientRect();\n      let newWidth = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      newWidth = clampColumnWidth(newWidth, column);\n      if (width > 0 && newWidth !== width) {\n        onColumnResize(column, newWidth);\n      }\n    }\n\n    function onDoubleClick() {\n      hasDoubleClicked = true;\n      onColumnResize(column, 'max-content');\n    }\n\n    function onLostPointerCapture(event: PointerEvent) {\n      // Handle final pointer position that may have been skipped by coalesced pointer move events.\n      // Skip move pointer handling if the user double-clicked.\n      if (!hasDoubleClicked) {\n        onPointerMove(event);\n      }\n\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('dblclick', onDoubleClick);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('dblclick', onDoubleClick);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick(event: React.MouseEvent<HTMLSpanElement>) {\n    selectCell({ idx: column.idx, rowIdx });\n\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell({ idx: 0, rowIdx });\n    }\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    event.dataTransfer.setData(dragDropKey, column.key);\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragging(true);\n  }\n\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    // The dragDropKey is derived from the useId() hook, which can sometimes generate keys with uppercase letters.\n    // When setting data using event.dataTransfer.setData(), the key is automatically converted to lowercase in some browsers.\n    // To ensure consistent comparison, we normalize the dragDropKey to lowercase before checking its presence in the event's dataTransfer types.\n    // https://html.spec.whatwg.org/multipage/dnd.html#the-datatransfer-interface\n    if (event.dataTransfer.types.includes(dragDropKey.toLowerCase())) {\n      const sourceKey = event.dataTransfer.getData(dragDropKey.toLowerCase());\n      if (sourceKey !== column.key) {\n        event.preventDefault();\n        onColumnsReorder?.(sourceKey, column.key);\n      }\n    }\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  let draggableProps: React.HTMLAttributes<HTMLDivElement> | undefined;\n  if (draggable) {\n    draggableProps = {\n      draggable: true,\n      /* events fired on the draggable target */\n      onDragStart,\n      onDragEnd,\n      /* events fired on the drop targets */\n      onDragOver,\n      onDragEnter,\n      onDragLeave,\n      onDrop\n    };\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan, headerRowHeight, depth),\n        ...getCellStyle(column, colSpan)\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onKeyDown={sortable ? onKeyDown : undefined}\n      {...draggableProps}\n    >\n      {renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        tabIndex: childTabIndex\n      })}\n\n      {resizable && (\n        <div\n          className={resizeHandleClassname}\n          onClick={stopPropagation}\n          onPointerDown={onPointerDown}\n        />\n      )}\n    </div>\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      block-size: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n\nexport const topSummaryRowClassname = 'rdg-top-summary-row';\n\nexport const bottomSummaryRowClassname = 'rdg-bottom-summary-row';\n","import { memo, useId } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan } from './utils';\nimport type { CalculatedColumn, Direction, Position } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange' | 'onColumnsReorder'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  rowIdx: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (position: Position) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n  headerRowHeight: number | number[],\n  depth: number\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  headerRowHeight,\n  depth\n}: HeaderRowProps<R, SR, K>) {\n  // eslint-disable-next-line react-compiler/react-compiler\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const dragDropKey = useId();\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        rowIdx={rowIdx}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onColumnsReorder={onColumnsReorder}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n        dragDropKey={dragDropKey}\n        headerRowHeight={headerRowHeight}\n        depth={depth}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => React.JSX.Element;\n","import { memo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, Position } from './types';\nimport GroupedColumnHeaderCell from './GroupedColumnHeaderCell';\nimport { headerRowClassname } from './HeaderRow';\n\nexport interface GroupedColumnHeaderRowProps<R, SR> {\n  rowIdx: number;\n  level: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectCell: (position: Position) => void;\n  selectedCellIdx: number | undefined;\n  headerRowHeight: number | number[]\n  depth: number\n}\n\nfunction GroupedColumnHeaderRow<R, SR>({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell,\n  headerRowHeight,\n  depth\n}: GroupedColumnHeaderRowProps<R, SR>) {\n  const cells = [];\n  const renderedParents = new Set<CalculatedColumnParent<R, SR>>();\n\n  for (const column of columns) {\n    let { parent } = column;\n\n    if (parent === undefined) continue;\n\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const { idx } = parent;\n      cells.push(\n        <GroupedColumnHeaderCell<R, SR>\n          key={idx}\n          column={parent}\n          rowIdx={rowIdx}\n          isCellSelected={selectedCellIdx === idx}\n          selectCell={selectCell}\n          headerRowHeight={headerRowHeight}\n          depth={depth}\n        />\n      );\n    }\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(GroupedColumnHeaderRow) as <R, SR>(\n  props: GroupedColumnHeaderRowProps<R, SR>\n) => React.JSX.Element;\n","import { forwardRef, memo, useMemo, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, useLatestFunc, type RowSelectionContextValue } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    selectedCellIdx,\n    isRowSelectionDisabled,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RenderRowProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const renderCell = useDefaultRenderers<R, SR>()!.renderCell!;\n\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        renderCell(column.key, {\n          column,\n          colSpan,\n          row,\n          rowIdx,\n          isCopied: copiedCellIdx === idx,\n          isDraggedOver: draggedOverCellIdx === idx,\n          isCellSelected,\n          onClick: onCellClick,\n          onDoubleClick: onCellDoubleClick,\n          onContextMenu: onCellContextMenu,\n          onRowChange: handleRowChange,\n          selectCell\n        })\n      );\n    }\n  }\n\n  const selectionValue = useMemo(\n    (): RowSelectionContextValue => ({ isRowSelected, isRowSelectionDisabled }),\n    [isRowSelectionDisabled, isRowSelected]\n  );\n\n  return (\n    <RowSelectionProvider value={selectionValue}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RenderRowProps<R, SR> & RefAttributes<HTMLDivElement>\n) => React.JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridRef,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridRef: React.RefObject<HTMLDivElement | null>;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridRef.current!,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridRef, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { cell } from './cell';\nimport { bottomSummaryRowClassname, row, topSummaryRowClassname } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 90.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 17.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n`;\n\nconst root = css`\n  @layer rdg.Defaults {\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n  }\n\n  @layer rdg.Root {\n    ${lightTheme}\n    --rdg-selection-color: #66afe9;\n    --rdg-font-size: 14px;\n    --rdg-cell-frozen-box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n\n    &:dir(rtl) {\n      --rdg-cell-frozen-box-shadow: -2px 0 5px -2px rgba(136, 136, 136, 0.3);\n    }\n\n    display: grid;\n\n    color-scheme: var(--rdg-color-scheme, light dark);\n    accent-color: light-dark(hsl(207deg 100% 29%), hsl(207deg 100% 79%));\n\n    /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n    /* We set a stacking context so internal elements don't render on top of external elements. */\n    /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n    contain: content;\n    content-visibility: auto;\n    block-size: 350px;\n    border: 1px solid var(--rdg-border-color);\n    box-sizing: border-box;\n    overflow: auto;\n    background-color: var(--rdg-background-color);\n    color: var(--rdg-color);\n    font-size: var(--rdg-font-size);\n\n    /* needed on Firefox to fix scrollbars */\n    &::before {\n      content: '';\n      grid-column: 1/-1;\n      grid-row: 1/-1;\n    }\n\n    &.rdg-dark {\n      --rdg-color-scheme: dark;\n      ${darkTheme}\n    }\n\n    &.rdg-light {\n      --rdg-color-scheme: light;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      &:not(.rdg-light) {\n        ${darkTheme}\n      }\n    }\n\n    > :nth-last-child(1 of .${topSummaryRowClassname}) {\n      > .${cell} {\n        border-block-end: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n\n    > :nth-child(1 of .${bottomSummaryRowClassname}) {\n      > .${cell} {\n        border-block-start: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => React.JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport {\n  bottomSummaryRowClassname,\n  rowClassname,\n  rowSelectedClassname,\n  topSummaryRowClassname\n} from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [`${topSummaryRowClassname} ${topSummaryRow}`]: isTop,\n          [bottomSummaryRowClassname]: !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => React.JSX.Element;\n","import { forwardRef, useCallback, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport type { Key, KeyboardEvent, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  HeaderRowSelectionChangeProvider,\n  HeaderRowSelectionProvider,\n  RowSelectionChangeProvider,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useLayoutEffect,\n  useViewportColumns,\n  useViewportRows,\n  type HeaderRowSelectionContextValue\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  CellSelectArgs,\n  Column,\n  ColumnOrColumnGroup,\n  CopyEvent,\n  Direction,\n  FillEvent,\n  Maybe,\n  PasteEvent,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectHeaderRowEvent,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { defaultRenderCell } from './Cell';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport GroupedColumnHeaderRow from './GroupedColumnHeaderRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\nexport type DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'renderCell' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable' | 'draggable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-description'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly ColumnOrColumnGroup<NoInfer<R>, NoInfer<SR>>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: NoInfer<R>) => K>;\n  onRowsChange?: Maybe<(rows: NoInfer<R>[], data: RowsChangeData<NoInfer<R>, NoInfer<SR>>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: NoInfer<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number | number[]>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Determines if row selection is disabled, per row */\n  isRowSelectionDisabled?: Maybe<(row: NoInfer<R>) => boolean>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<NoInfer<K>>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<NoInfer<R>, NoInfer<SR>>>;\n  onFill?: Maybe<(event: FillEvent<NoInfer<R>>) => NoInfer<R>>;\n  onCopy?: Maybe<(event: CopyEvent<NoInfer<R>>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<NoInfer<R>>) => NoInfer<R>>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  onCellKeyDown?: Maybe<\n    (args: CellKeyDownArgs<NoInfer<R>, NoInfer<SR>>, event: CellKeyboardEvent) => void\n  >;\n  /** Function called whenever cell selection is changed */\n  onSelectedCellChange?: Maybe<(args: CellSelectArgs<NoInfer<R>, NoInfer<SR>>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(column: CalculatedColumn<R, SR>, width: number) => void>;\n  /** Called when a column is reordered */\n  onColumnsReorder?: Maybe<(sourceColumnKey: string, targetColumnKey: string) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<NoInfer<R>, NoInfer<SR>>>;\n  rowClass?: Maybe<(row: NoInfer<R>, rowIdx: number) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n  'data-cy'?: Maybe<string>;\n}\n\nexport function adjustArray(arr: number[], count: number,): number[] {\n  if (arr.length >= count) {\n    // 如果数组长度大于等于 count，截取到 count 长度\n    return arr.slice(0, count);\n  }\n  if (arr.length === 0) {\n    // 如果数组为空，返回一个由 35 组成的新数组\n    return new Array(count).fill(35) as number[];\n  }\n  // 如果数组长度小于 count，补充最后一个元素\n  const arr1 = [] as number[]\n  const lastElement = arr[arr.length - 1];\n  return arr1.concat(arr).concat(new Array(count - arr.length).fill(lastElement));\n\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    isRowSelectionDisabled,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-description': ariaDescription,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId,\n    'data-cy': dataCy\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  let headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderCell = renderers?.renderCell ?? defaultRenderers?.renderCell ?? defaultRenderCell;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n  const [shouldFocusCell, setShouldFocusCell] = useState(false);\n  const [previousRowIdx, setPreviousRowIdx] = useState(-1);\n\n  const getColumnWidth = useCallback(\n    (column: CalculatedColumn<R, SR>) => {\n      return (\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width\n      );\n    },\n    [measuredColumnWidths, resizedColumnWidths]\n  );\n\n  const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n\n  /**\n   * refs\n   */\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  headerRowHeight = Array.isArray(headerRowHeight) ? adjustArray(headerRowHeight, headerRowsCount) : headerRowHeight\n  const headerRowsHeight = Array.isArray(headerRowHeight)\n    ? headerRowHeight.reduce((total, height) => total + height, 0)\n    : headerRowsCount * headerRowHeight;\n  const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus,\n      renderCell\n    }),\n    [renderCheckbox, renderSortStatus, renderCell]\n  );\n\n  const headerSelectionValue = useMemo((): HeaderRowSelectionContextValue => {\n    // no rows to select = explicitely unchecked\n    let hasSelectedRow = false;\n    let hasUnselectedRow = false;\n\n    if (rowKeyGetter != null && selectedRows != null && selectedRows.size > 0) {\n      for (const row of rows) {\n        if (selectedRows.has(rowKeyGetter(row))) {\n          hasSelectedRow = true;\n        } else {\n          hasUnselectedRow = true;\n        }\n\n        if (hasSelectedRow && hasUnselectedRow) break;\n      }\n    }\n\n    return {\n      isRowSelected: hasSelectedRow && !hasUnselectedRow,\n      isIndeterminate: hasSelectedRow && hasUnselectedRow\n    };\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectHeaderRowLatest = useLatestFunc(selectHeaderRow);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(({ idx, rowIdx }: Position) => {\n    selectCell({ rowIdx: minRowIdx + rowIdx - 1, idx });\n  });\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  const focusCellOrCellContent = useCallback(() => {\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  }, [gridRef]);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      focusSinkRef.current !== null &&\n      selectedCellIsWithinSelectionBounds &&\n      selectedPosition.idx === -1\n    ) {\n      focusSinkRef.current.focus({ preventScroll: true });\n      scrollIntoView(focusSinkRef.current);\n    }\n  }, [selectedCellIsWithinSelectionBounds, selectedPosition]);\n\n  useLayoutEffect(() => {\n    if (shouldFocusCell) {\n      setShouldFocusCell(false);\n      focusCellOrCellContent();\n    }\n  }, [shouldFocusCell, focusCellOrCellContent]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * event handlers\n   */\n  function selectHeaderRow(args: SelectHeaderRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    const newSelectedRows = new Set(selectedRows);\n    for (const row of rows) {\n      if (isRowSelectionDisabled?.(row) === true) continue;\n      const rowKey = rowKeyGetter(row);\n      if (args.checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const { row, checked, isShiftClick } = args;\n    if (isRowSelectionDisabled?.(row) === true) return;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    const rowIdx = rows.indexOf(row);\n    setPreviousRowIdx(rowIdx);\n\n    if (checked) {\n      newSelectedRows.add(rowKey);\n    } else {\n      newSelectedRows.delete(rowKey);\n    }\n\n    if (\n      isShiftClick &&\n      previousRowIdx !== -1 &&\n      previousRowIdx !== rowIdx &&\n      previousRowIdx < rows.length\n    ) {\n      const step = sign(rowIdx - previousRowIdx);\n      for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n        const row = rows[i];\n        if (isRowSelectionDisabled?.(row) === true) continue;\n        if (checked) {\n          newSelectedRows.add(rowKeyGetter(row));\n        } else {\n          newSelectedRows.delete(rowKeyGetter(row));\n        }\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    const { keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event)\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        // copy highlighted text only\n        if (window.getSelection()?.isCollapsed === false) return;\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rows[rowIdx];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rows[rowIdx];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinEditBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinEditBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    const samePosition = isSamePosition(selectedPosition, position);\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx];\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (samePosition) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      setShouldFocusCell(true);\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row: isRowIdxWithinViewportBounds(position.rowIdx) ? rows[position.rowIdx] : undefined,\n        column: columns[position.idx]\n      });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || (key === 'Tab' && !shiftKey),\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function renderDragHandle() {\n    if (\n      onFill == null ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinViewportBounds(selectedPosition)\n    ) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n\n    const columnWidth = getColumnWidth(column);\n\n    return (\n      <DragHandle\n        gridRowStart={headerAndTopSummaryRowsCount + rowIdx + 1}\n        rows={rows}\n        column={column}\n        columnWidth={columnWidth}\n        maxColIdx={maxColIdx}\n        isLastRow={rowIdx === maxRowIdx}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onClick={focusCellOrCellContent}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      setShouldFocusCell(shouldFocusCell);\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n          ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n          selectedColumn,\n          ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n        ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelectionDisabled: isRowSelectionDisabled?.(row) ?? false,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = ``;\n  if (Array.isArray(headerRowHeight)) {\n    const str = headerRowHeight.map(o => `${o}px`).join(' ');\n    templateRows += str\n  } else {\n    templateRows += `repeat(${headerRowsCount}, ${headerRowHeight}px)`\n  }\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    // biome-ignore lint/a11y/useValidAriaProps: aria-description is a valid prop\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-description={ariaDescription}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n              scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${bottomSummaryRowsCount * summaryRowHeight\n              }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n      data-cy={dataCy}\n    >\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <HeaderRowSelectionChangeProvider value={selectHeaderRowLatest}>\n          <HeaderRowSelectionProvider value={headerSelectionValue}>\n            {Array.from({ length: groupedColumnHeaderRowsCount }, (_, index) => (\n              <GroupedColumnHeaderRow\n                key={index}\n                rowIdx={index + 1}\n                level={-groupedColumnHeaderRowsCount + index}\n                columns={getRowViewportColumns(minRowIdx + index)}\n                selectedCellIdx={\n                  selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined\n                }\n                selectCell={selectHeaderCellLatest}\n                headerRowHeight={headerRowHeight}\n                depth={headerRowsCount}\n              />\n            ))}\n            <HeaderRow\n              rowIdx={headerRowsCount}\n              columns={getRowViewportColumns(mainHeaderRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              onColumnsReorder={onColumnsReorderLastest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n              headerRowHeight={headerRowHeight}\n              depth={headerRowsCount}\n            />\n          </HeaderRowSelectionProvider>\n        </HeaderRowSelectionChangeProvider>\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + 1 + rowIdx;\n              const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowsHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  key={rowIdx}\n                  aria-rowindex={gridRowStart}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop={false}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n      </DataGridDefaultRenderersProvider>\n\n      {renderDragHandle()}\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridRef={gridRef}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => React.JSX.Element;\n"],"names":["r","f","o","clsx","getColSpan","column","lastFrozenColumnIndex","args","colSpan","stopPropagation","event","scrollIntoView","element","createCellEvent","defaultPrevented","cellEvent","nonInputKeys","isCtrlKeyHeldDown","isDefaultCellInput","onEditorNavigation","key","target","measuringCellClassname","renderMeasuringCells","viewportColumns","map","idx","minWidth","maxWidth","jsx","className","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","row","isCellEditableUtil","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","rowIdx","mainHeaderRowIdx","topSummaryRowsCount","getNextSelectedCellPosition","moveUp","moveNext","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentIdx","currentRowIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","columnsCount","setColSpan","colIdx","getParentRowIdx","parent","setHeaderGroupColAndRowSpan","parentRowIdx","found","nextParentRowIdx","canExitGrid","maxColIdx","shiftKey","cell","cellClassname","cellFrozen","cellFrozenClassname","getRowStyle","getHeaderCellStyle","rowSpan","headerRowHeight","depth","gridRowEnd","paddingBlockStart","p","len","level","plevel","sum","cur","getCellStyle","index","getCellClassname","extraClasses","min","max","floor","sign","abs","assertIsValidKeyGetter","keyGetter","clampColumnWidth","width","getHeaderCellRowSpan","checkbox","checkboxClassname","renderCheckbox","onChange","indeterminate","props","handleChange","e","checked","nativeEvent","ref","el","type","renderValue","DataGridDefaultRenderersContext","createContext","DataGridDefaultRenderersProvider","useDefaultRenderers","useContext","SelectCellFormatter","value","tabIndex","disabled","ariaLabel","ariaLabelledBy","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","HeaderRowSelectionContext","HeaderRowSelectionProvider","HeaderRowSelectionChangeContext","HeaderRowSelectionChangeProvider","useHeaderRowSelection","headerRowSelectionContext","headerRowSelectionChangeContext","SELECT_COLUMN_KEY","HeaderRenderer","isIndeterminate","isRowSelected","onRowSelectionChange","SelectFormatter","isRowSelectionDisabled","isShiftClick","SelectGroupFormatter","SelectColumn","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","defaultColumnOptions","getColumnWidth","viewportWidth","scrollLeft","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultCellRenderer","defaultSortable","defaultResizable","defaultDraggable","headerRowsCount","useMemo","collectColumns","rawColumn","calculatedColumnParent","frozen","aKey","frozenA","bKey","frozenB","updateColumnParent","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","left","columnMetric","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useLayoutEffect","useEffect","useOriginalLayoutEffect","useColumnWidths","gridRef","gridWidth","resizedColumnWidths","measuredColumnWidths","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","prevGridWidthRef","useRef","columnsCanFlex","ignorePreviouslyMeasuredColumns","newTemplateColumns","columnsToMeasure","gridTemplateColumns","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","handleColumnResize","nextWidth","resizingKey","flushSync","newResizedColumnWidths","selector","useGridDimensions","inlineSize","setInlineSize","useState","blockSize","setBlockSize","horizontalScrollbarHeight","setHorizontalScrollbarHeight","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","height","initialHorizontalScrollbarHeight","initialWidth","initialHeight","resizeObserver","entries","size","useLatestFunc","fn","callbackFn","useCallback","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","useViewportRows","rowHeight","scrollTop","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","validateRowIdx","start","end","middle","currentOffset","rowVisibleStartIdx","rowVisibleEndIdx","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCellSelected","isCopied","isDraggedOver","onClick","onDoubleClick","onContextMenu","onRowChange","selectCell","childTabIndex","cellClass","isEditable","selectCellWrapper","openEditor","handleClick","isGridDefaultPrevented","handleContextMenu","handleDoubleClick","handleRowChange","newRow","role","children","renderCell","isCellEditable","CellComponent","memo","forwardRef","defaultRenderCell","cellDragHandle","cellDragHandleFrozenClassname","cellDragHandleClassname","DragHandle","gridRowStart","columnWidth","isLastRow","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","setDraggedOverRowIdx","handleMouseDown","preventDefault","buttons","window","addEventListener","onMouseOver","onMouseUp","removeEventListener","handleDragEnd","overRowIdx","current","startRowIndex","endRowIndex","updateRows","length","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","columnKey","targetRow","push","getStyle","insetInlineStart","marginEnd","isLastColumn","marginInlineEnd","marginBlockEnd","onMouseDown","cellEditing","EditCell","closeEditor","onKeyDown","navigate","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","handleKeyDown","mode","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","displayCellContent","onMouseDownCapture","renderEditCell","jsxs","Fragment","GroupedColumnHeaderCell","headerSortCellClassname","headerSortName","headerSortNameClassname","renderHeaderCell","sortDirection","priority","sortable","SortableHeaderCell","name","renderSortStatus","cellSortableClassname","cellResizable","cellResizableClassname","resizeHandleClassname","cellDraggableClassname","cellDragging","cellDraggingClassname","cellOver","cellOverClassname","HeaderCell","onColumnsReorder","sortColumns","onSortColumnsChange","shouldFocusGrid","direction","dragDropKey","isDragging","setIsDragging","isOver","setIsOver","isRtl","sortIndex","findIndex","sort","sortColumn","ariaSort","resizable","draggable","headerCellClass","defaultRenderHeaderCell","onPointerDown","pointerType","currentTarget","pointerId","headerCell","parentElement","right","getBoundingClientRect","clientX","hasDoubleClicked","onPointerMove","newWidth","onLostPointerCapture","setPointerCapture","onSort","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","ctrlKey","metaKey","handleFocus","onDragStart","dataTransfer","setData","dropEffect","onDragEnd","onDragOver","onDrop","types","includes","toLowerCase","sourceKey","getData","onDragEnter","isEventPertinent","onDragLeave","draggableProps","relatedTarget","contains","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","topSummaryRowClassname","bottomSummaryRowClassname","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","useId","cells","GroupedColumnHeaderRow","renderedParents","Row","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","onMouseEnter","handleDragEnter","selectionValue","RowComponent","defaultRenderRow","ScrollToCell","setScrollToCellPosition","removeScrollToCell","observer","arrow","arrowClassname","renderSortIcon","renderSortPriority","viewBox","d","root","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","focusSinkHeaderAndSummaryClassname","summaryCellClassname","SummaryCell","summaryCellClass","renderSummaryCell","summaryRow","topSummaryRow","summaryRowClassname","SummaryRow","top","bottom","isTop","ariaRowIndex","adjustArray","arr","count","arr1","lastElement","DataGrid","rowKeyGetter","rawRowHeight","rawHeaderRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onCellKeyDown","onSelectedCellChange","onScroll","onCopy","onPaste","rawEnableVirtualization","renderers","rawDirection","rawRole","ariaDescription","ariaDescribedBy","rawAriaRowCount","testId","dataCy","defaultRenderers","summaryRowHeight","renderRow","defaultRenderSortStatus","defaultRenderCheckbox","noRowsFallback","setScrollTop","setScrollLeft","copiedCell","setCopiedCell","draggedOverRowIdx","setOverRowIdx","scrollToPosition","setScrollToPosition","setShouldFocusCell","previousRowIdx","setPreviousRowIdx","gridHeight","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","groupedColumnHeaderRowsCount","setSelectedPosition","focusSinkRef","isTreeGrid","headerRowsHeight","total","summaryRowsHeight","isSelectable","leftKey","rightKey","ariaRowCount","defaultGridComponents","headerSelectionValue","hasSelectedRow","hasUnselectedRow","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","handleColumnResizeLatest","onColumnsReorderLastest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectHeaderRowLatest","selectHeaderRow","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectHeaderCellLatest","focusCellOrCellContent","getCellToScroll","useImperativeHandle","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","newSelectedRows","rowKey","step","isCellEvent","isRowEvent","keyCode","handleCopy","handlePaste","handleCellInput","handleScroll","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","isColIdxWithinSelectionBounds","isCellWithinEditBounds","enableEditor","samePosition","isSamePosition","getNextPosition","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","renderDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","c","templateRows","str","isGroupRowFocused","_","summaryRowIdx","isSummaryRowSelected","gridEl","p1","p2"],"mappings":"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","x_google_ignoreList":[0]}