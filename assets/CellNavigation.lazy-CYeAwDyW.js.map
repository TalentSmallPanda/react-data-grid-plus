{"version":3,"file":"CellNavigation.lazy-CYeAwDyW.js","sources":["../../website/routes/CellNavigation.lazy.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { createLazyFileRoute } from '@tanstack/react-router';\n\nimport DataGrid from '../../src';\nimport type { CellKeyboardEvent, CellKeyDownArgs, Column } from '../../src';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createLazyFileRoute('/CellNavigation')({\n  component: CellNavigation\n});\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n  startDate: string;\n  completeDate: string;\n}\n\ntype CellNavigationMode = 'NONE' | 'CHANGE_ROW' | 'LOOP_OVER_ROW' | 'LOOP_OVER_COLUMN' | 'NO_TAB';\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title'\n  },\n  {\n    key: 'priority',\n    name: 'Priority'\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type'\n  },\n  {\n    key: 'complete',\n    name: '% Complete'\n  },\n  {\n    key: 'startDate',\n    name: 'Start Date'\n  },\n  {\n    key: 'completeDate',\n    name: 'Expected Complete',\n    width: 200\n  }\n];\n\nfunction getRandomDate(start: Date, end: Date) {\n  return new Date(\n    start.getTime() + Math.random() * (end.getTime() - start.getTime())\n  ).toLocaleDateString();\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.floor(Math.random() * 3 + 1)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.floor(Math.random() * 3 + 1)],\n      startDate: getRandomDate(new Date(2015, 3, 1), new Date()),\n      completeDate: getRandomDate(new Date(), new Date(2016, 0, 1))\n    });\n  }\n\n  return rows;\n}\n\nfunction CellNavigation() {\n  const direction = useDirection();\n  const [rows] = useState(createRows);\n  const [cellNavigationMode, setCellNavigationMode] = useState<CellNavigationMode>('CHANGE_ROW');\n\n  function handleCellKeyDown(args: CellKeyDownArgs<Row>, event: CellKeyboardEvent) {\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    const { idx } = column;\n    const { key, shiftKey } = event;\n\n    const preventDefault = () => {\n      event.preventGridDefault();\n      event.preventDefault();\n    };\n\n    const loopOverNavigation = () => {\n      if ((key === 'ArrowRight' || (key === 'Tab' && !shiftKey)) && idx === columns.length - 1) {\n        selectCell({ rowIdx, idx: 0 });\n        preventDefault();\n      } else if ((key === 'ArrowLeft' || (key === 'Tab' && shiftKey)) && idx === 0) {\n        selectCell({ rowIdx, idx: columns.length - 1 });\n        preventDefault();\n      }\n    };\n\n    const changeRowNavigation = () => {\n      if (key === 'ArrowRight' && idx === columns.length - 1) {\n        if (rows.length === 0) return;\n        if (rowIdx === -1) {\n          selectCell({ rowIdx: 0, idx: 0 });\n        } else {\n          if (rowIdx === rows.length - 1) return;\n          selectCell({ rowIdx: rowIdx + 1, idx: 0 });\n        }\n        preventDefault();\n      } else if (key === 'ArrowLeft' && idx === 0) {\n        if (rowIdx === -1) return;\n        selectCell({ rowIdx: rowIdx - 1, idx: columns.length - 1 });\n        preventDefault();\n      }\n    };\n\n    const loopOverColumnNavigation = () => {\n      let newRowIdx: number;\n      if (rowIdx === -1) {\n        newRowIdx = shiftKey ? rows.length - 1 : 0;\n      } else {\n        newRowIdx = shiftKey ? rowIdx - 1 : rowIdx === rows.length - 1 ? -1 : rowIdx + 1;\n      }\n      selectCell({ rowIdx: newRowIdx, idx });\n      preventDefault();\n    };\n\n    if (cellNavigationMode === 'LOOP_OVER_ROW') {\n      loopOverNavigation();\n    } else if (cellNavigationMode === 'CHANGE_ROW') {\n      changeRowNavigation();\n    } else if (cellNavigationMode === 'LOOP_OVER_COLUMN' && key === 'Tab') {\n      loopOverColumnNavigation();\n    } else if (cellNavigationMode === 'NO_TAB' && key === 'Tab') {\n      // Need to allow default event to focus the next element\n      event.preventGridDefault();\n    }\n  }\n\n  return (\n    <>\n      <div style={{ marginBlockEnd: 5 }}>\n        Cell Navigation Modes:\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'NONE'}\n            onChange={() => setCellNavigationMode('NONE')}\n          />\n          None\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'CHANGE_ROW'}\n            onChange={() => setCellNavigationMode('CHANGE_ROW')}\n          />\n          Change Row\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'LOOP_OVER_ROW'}\n            onChange={() => setCellNavigationMode('LOOP_OVER_ROW')}\n          />\n          Loop Over Row\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'LOOP_OVER_COLUMN'}\n            onChange={() => setCellNavigationMode('LOOP_OVER_COLUMN')}\n          />\n          Loop Over Column\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'NO_TAB'}\n            onChange={() => setCellNavigationMode('NO_TAB')}\n          />\n          No Tab\n        </label>\n      </div>\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        direction={direction}\n        onCellKeyDown={handleCellKeyDown}\n      />\n    </>\n  );\n}\n"],"names":["Route","createLazyFileRoute","CellNavigation","columns","getRandomDate","start","end","createRows","rows","i","direction","useDirection","useState","cellNavigationMode","setCellNavigationMode","handleCellKeyDown","args","event","column","rowIdx","selectCell","idx","key","shiftKey","preventDefault","newRowIdx","jsxs","Fragment","jsx","DataGrid"],"mappings":"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"}