{"version":3,"file":"ScrollToCell.lazy-sedQIwse.js","sources":["../../website/routes/ScrollToCell.lazy.tsx"],"sourcesContent":["import { useRef, useState } from 'react';\nimport { createLazyFileRoute } from '@tanstack/react-router';\nimport { css } from '@linaria/core';\n\nimport DataGrid from '../../src';\nimport type { Column, DataGridHandle } from '../../src';\nimport { renderCoordinates } from '../renderers';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createLazyFileRoute('/ScrollToCell')({\n  component: ScrollToCell\n});\n\ntype Row = number;\nconst rows: readonly Row[] = Array.from({ length: 200 }, (_, i) => i);\nconst columns: Column<Row>[] = [];\nfor (let i = 0; i < 200; i++) {\n  const key = String(i);\n  columns.push({\n    key,\n    name: key,\n    width: 120,\n    frozen: i < 5,\n    resizable: true,\n    renderCell: renderCoordinates\n  });\n}\n\nconst flexClassname = css`\n  display: flex;\n  gap: 5px;\n  margin-block-end: 5px;\n`;\n\nfunction ScrollToCell() {\n  const direction = useDirection();\n  const [idx, setIdx] = useState<number | undefined>(10);\n  const [rowIdx, setRowIdx] = useState<number | undefined>(10);\n  const gridRef = useRef<DataGridHandle>(null);\n\n  function scrollToColumn() {\n    gridRef.current!.scrollToCell({ idx });\n  }\n\n  function scrollToRow() {\n    gridRef.current!.scrollToCell({ rowIdx });\n  }\n\n  function scrollToCell() {\n    gridRef.current!.scrollToCell({ idx, rowIdx });\n  }\n\n  return (\n    <>\n      <div className={flexClassname}>\n        <label>\n          <span>Column index: </span>\n          <input\n            style={{ inlineSize: 50 }}\n            type=\"number\"\n            value={idx ?? ''}\n            onChange={(event) => {\n              const { valueAsNumber } = event.target;\n              setIdx(Number.isNaN(valueAsNumber) ? undefined : valueAsNumber);\n            }}\n          />\n        </label>\n        <label>\n          <span>Row index: </span>\n          <input\n            style={{ inlineSize: 50 }}\n            type=\"number\"\n            value={rowIdx ?? ''}\n            onChange={(event) => {\n              const { valueAsNumber } = event.target;\n              setRowIdx(Number.isNaN(valueAsNumber) ? undefined : valueAsNumber);\n            }}\n          />\n        </label>\n      </div>\n      <div className={flexClassname}>\n        <button type=\"button\" onClick={scrollToCell}>\n          Scroll to cell\n        </button>\n        <button type=\"button\" onClick={scrollToColumn}>\n          Scroll to column\n        </button>\n        <button type=\"button\" onClick={scrollToRow}>\n          Scroll to row\n        </button>\n      </div>\n      <DataGrid\n        ref={gridRef}\n        columns={columns}\n        rows={rows}\n        className=\"fill-grid\"\n        direction={direction}\n      />\n    </>\n  );\n}\n"],"names":["Route","createLazyFileRoute","component","ScrollToCell","rows","Array","from","length","_","i","columns","key","String","push","name","width","frozen","resizable","renderCell","renderCoordinates","flexClassname","direction","useDirection","idx","setIdx","useState","rowIdx","setRowIdx","gridRef","useRef","scrollToColumn","current","scrollToCell","scrollToRow","jsxs","Fragment","children","className","jsx","style","inlineSize","type","value","onChange","event","valueAsNumber","target","Number","isNaN","onClick","DataGrid","ref"],"mappings":"kKASaA,EAAQC,EAAoB,eAAe,EAAE,CACxDC,UAAWC,CACb,CAAC,EAGKC,EAAuBC,MAAMC,KAAK,CAAEC,OAAQ,GAAI,EAAG,CAACC,EAAGC,IAAMA,CAAC,EAC9DC,EAAyB,CAAC,EAChC,QAASD,EAAI,EAAGA,EAAI,IAAKA,IAAK,CACtB,MAAAE,EAAMC,OAAOH,CAAC,EACpBC,EAAQG,KAAK,CACXF,IAAAA,EACAG,KAAMH,EACNI,MAAO,IACPC,OAAQP,EAAI,EACZQ,UAAW,GACXC,WAAYC,CACd,CAAC,CACH,CAEA,MAAMC,EAAgB,WAMtB,SAASjB,GAAe,CACtB,MAAMkB,EAAYC,EAAa,EACzB,CAACC,EAAKC,CAAM,EAAIC,EAAAA,SAA6B,EAAE,EAC/C,CAACC,EAAQC,CAAS,EAAIF,EAAAA,SAA6B,EAAE,EACrDG,EAAUC,SAAuB,IAAI,EAE3C,SAASC,GAAiB,CACxBF,EAAQG,QAASC,aAAa,CAAET,IAAAA,CAAI,CAAC,CACvC,CAEA,SAASU,GAAc,CACrBL,EAAQG,QAASC,aAAa,CAAEN,OAAAA,CAAO,CAAC,CAC1C,CAEA,SAASM,GAAe,CACtBJ,EAAQG,QAASC,aAAa,CAAET,IAAAA,EAAKG,OAAAA,CAAO,CAAC,CAC/C,CAEA,OAEIQ,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SAAA,CAACF,EAAA,KAAA,MAAA,CAAIG,UAAWjB,EACdgB,SAAA,CAAAF,EAAA,KAAC,QACC,CAAAE,SAAA,CAAAE,EAAA,IAAC,QAAKF,SAAc,gBAAA,CAAA,EACpBE,EAAA,IAAC,QAAA,CACCC,MAAO,CAAEC,WAAY,EAAG,EACxBC,KAAK,SACLC,MAAOnB,GAAO,GACdoB,SAAWC,GAAU,CACb,KAAA,CAAEC,cAAAA,CAAc,EAAID,EAAME,OAChCtB,EAAOuB,OAAOC,MAAMH,CAAa,EAAI,OAAYA,CAAa,CAChE,CAAA,CACF,CAAA,CACF,CAAA,SACC,QACC,CAAAT,SAAA,CAAAE,EAAA,IAAC,QAAKF,SAAW,aAAA,CAAA,EACjBE,EAAA,IAAC,QAAA,CACCC,MAAO,CAAEC,WAAY,EAAG,EACxBC,KAAK,SACLC,MAAOhB,GAAU,GACjBiB,SAAWC,GAAU,CACb,KAAA,CAAEC,cAAAA,CAAc,EAAID,EAAME,OAChCnB,EAAUoB,OAAOC,MAAMH,CAAa,EAAI,OAAYA,CAAa,CACnE,CAAA,CACF,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACAX,EAAA,KAAC,MAAI,CAAAG,UAAWjB,EACdgB,SAAA,CAAAE,EAAA,IAAC,SAAO,CAAAG,KAAK,SAASQ,QAASjB,EAAcI,SAE7C,gBAAA,CAAA,QACC,SAAO,CAAAK,KAAK,SAASQ,QAASnB,EAAgBM,SAE/C,kBAAA,CAAA,QACC,SAAO,CAAAK,KAAK,SAASQ,QAAShB,EAAaG,SAE5C,eAAA,CAAA,CAAA,CACF,CAAA,EACAE,EAAA,IAACY,EAAA,CACCC,IAAKvB,EACLlB,QAAAA,EACAN,KAAAA,EACAiC,UAAU,YACVhB,UAAAA,CAAA,CACF,CAAA,CACF,CAAA,CAEJ"}