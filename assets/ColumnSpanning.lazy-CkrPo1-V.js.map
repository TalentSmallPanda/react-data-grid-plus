{"version":3,"file":"ColumnSpanning.lazy-CkrPo1-V.js","sources":["../../website/routes/ColumnSpanning.lazy.tsx"],"sourcesContent":["import { createLazyFileRoute } from '@tanstack/react-router';\nimport { css } from '@linaria/core';\n\nimport DataGrid from '../../src';\nimport type { Column } from '../../src';\nimport { renderCoordinates } from '../renderers';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createLazyFileRoute('/ColumnSpanning')({\n  component: ColumnSpanning\n});\n\ntype Row = number;\nconst rows: readonly Row[] = Array.from({ length: 100 }, (_, i) => i);\n\nconst colSpanClassname = css`\n  background-color: #ffb300;\n  color: black;\n  text-align: center;\n`;\n\nconst columns: Column<Row>[] = [];\n\nfor (let i = 0; i < 30; i++) {\n  const key = String(i);\n  columns.push({\n    key,\n    name: key,\n    frozen: i < 5,\n    resizable: true,\n    renderCell: renderCoordinates,\n    colSpan(args) {\n      if (args.type === 'ROW') {\n        if (key === '2' && args.row === 2) return 3;\n        if (key === '4' && args.row === 4) return 6; // Will not work as colspan includes both frozen and regular columns\n        if (key === '0' && args.row === 5) return 5;\n        if (key === '27' && args.row === 8) return 3;\n        if (key === '6' && args.row < 8) return 2;\n      }\n      if (args.type === 'HEADER' && key === '8') {\n        return 3;\n      }\n      return undefined;\n    },\n    cellClass(row) {\n      if (\n        (key === '0' && row === 5) ||\n        (key === '2' && row === 2) ||\n        (key === '27' && row === 8) ||\n        (key === '6' && row < 8)\n      ) {\n        return colSpanClassname;\n      }\n      return undefined;\n    }\n  });\n}\n\nfunction ColumnSpanning() {\n  const direction = useDirection();\n\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      rowHeight={22}\n      className=\"fill-grid\"\n      direction={direction}\n    />\n  );\n}\n"],"names":["Route","createLazyFileRoute","component","ColumnSpanning","rows","Array","from","length","_","i","colSpanClassname","columns","key","String","push","name","frozen","resizable","renderCell","renderCoordinates","colSpan","args","type","row","cellClass","direction","useDirection","jsx","DataGrid","rowHeight","className"],"mappings":"2JAQaA,EAAQC,EAAoB,iBAAiB,EAAE,CAC1DC,UAAWC,CACb,CAAC,EAGKC,EAAuBC,MAAMC,KAAK,CAAEC,OAAQ,GAAI,EAAG,CAACC,EAAGC,IAAMA,CAAC,EAE9DC,EAAmB,UAMnBC,EAAyB,CAAC,EAEhC,QAASF,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACrB,MAAAG,EAAMC,OAAOJ,CAAC,EACpBE,EAAQG,KAAK,CACXF,IAAAA,EACAG,KAAMH,EACNI,OAAQP,EAAI,EACZQ,UAAW,GACXC,WAAYC,EACZC,QAAQC,EAAM,CACR,GAAAA,EAAKC,OAAS,MAAO,CACvB,GAAIV,IAAQ,KAAOS,EAAKE,MAAQ,EAAU,MAAA,GAC1C,GAAIX,IAAQ,KAAOS,EAAKE,MAAQ,EAAU,MAAA,GAC1C,GAAIX,IAAQ,KAAOS,EAAKE,MAAQ,EAAU,MAAA,GAC1C,GAAIX,IAAQ,MAAQS,EAAKE,MAAQ,EAAU,MAAA,GAC3C,GAAIX,IAAQ,KAAOS,EAAKE,IAAM,EAAU,MAAA,EAC1C,CACA,GAAIF,EAAKC,OAAS,UAAYV,IAAQ,IAC7B,MAAA,EAGX,EACAY,UAAUD,EAAK,CACb,GACGX,IAAQ,KAAOW,IAAQ,GACvBX,IAAQ,KAAOW,IAAQ,GACvBX,IAAQ,MAAQW,IAAQ,GACxBX,IAAQ,KAAOW,EAAM,EAEf,OAAAb,CAGX,CACF,CAAC,CACH,CAEA,SAASP,GAAiB,CACxB,MAAMsB,EAAYC,EAAa,EAG7B,OAAAC,EAAAA,IAACC,EAAA,CACCjB,QAAAA,EACAP,KAAAA,EACAyB,UAAW,GACXC,UAAU,YACVL,UAAAA,CAAA,CACF,CAEJ"}